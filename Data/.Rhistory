}
return(aics)
}
aic3 <- arma_aics(lPrice,10,1,10)
df <- read.csv("C:\\Users\\Lenovo\\Desktop\\ML\\Time Series\\exchange_rate.data")
df$Date <- as.Date(df$Date, format = "%B %d,%Y")
df <- df[order(df$Date),]
price <- as.ts(df$Price)
lPrice <- log(price)
plot(price)
plot(lPrice)
plot(sqrt(price))
acf(lPrice)
pacf(lPrice,ylim = c(-0.1,0.2))
library(tseries)
batteryTest <- function(x){
p.value.adf <- adf.test(x)$p.value
p.value.pp <- pp.test(x)$p.value
p.value.kpss <- kpss.test(x)$p.value
cat("The Results of the test for Unit Root")
cat("ADF Test ", "P.Value", " ",p.value.adf,"\n", sep="")
cat("PP Test ", "P.Value", " ",p.value.pp,"\n", sep="")
cat("KPSS Test ", "P.Value"," ", p.value.kpss,"\n", sep="")
}
batteryTest(lPrice)
dlPrice <- diff(lPrice)
batteryTest(dlPrice)
acf(dlPrice)
pacf(dlPrice)
Box.test(dlPrice,lag=30)
Box.test(dlPrice,lag=30,type="L")
arma_aics<-function(x,P,d,Q)
{
aics<-matrix(nrow=P+1,ncol=Q+1)
for(p in 0:P)
for(q in 0:Q)
{
mdl<-arima(x,order=c(p,d,q),method = "ML")
if( mdl$code==0 ) aics[p+1,q+1]<-mdl$aic
}
return(aics)
}
aic10 <- arma_aics(lPrice,10,1,10)
View(aic3)
sort(aic3)[1:10]
View(aic3)
sort(aic3)[1:10]
model52 <- arima(lsen,order=c(5,1,2),method = "ML")
model52 <- arima(lPrice,order=c(5,1,2),method = "ML")
model25<- arima(lPrice,order=c(2,1,5),method = "ML")
model33 <- arima(lPrice,order=c(3,1,3),method = "ML")
model02 <- arima(lPrice,order=c(0,1,2),method = "ML")
model35 <- arima(lPrice,order=c(3,1,5),method = "ML")
model53 <- arima(lPrice,order=c(5,1,3),method = "ML")
model20 <- arima(lPrice,order=c(2,1,0),method = "ML")
model34 <- arima(lPrice,order=c(3,1,4),method = "ML")
model03 <- arima(lPrice,order=c(0,1,3),method = "ML")
model12 <- arima(lPrice,order=c(1,1,2),method = "ML")
model52
model52$coef[1]
model52
arima(lPrice,order=c(5,1,2),method = "ML",fixed=c(0,NA,0,NA,0,NA,NA))
model53
model25
model34
model53
model35
model02
model20
mode30
model30
model03
model22
arima(x = lPrice, order = c(2, 1, 2), method = "ML")
arima(x = lPrice, order = c(2, 1, 3), method = "ML")
arima(x = lPrice, order = c(3, 1, 2), method = "ML")
arima(x = lPrice, order = c(1,1,2), method = "ML")
arima(x = lPrice, order = c(1,1,3), method = "ML")
arima(x = lPrice, order = c(3,1,1), method = "ML")
arima(x = lPrice, order = c(0,1,3), method = "ML")
arima(x = lPrice, order = c(0,1,2), method = "ML")
arima(x = lPrice, order = c(2,1,0), method = "ML")
arima(x = lPrice, order = c(5,1,3), method = "ML")
arima(x = lPrice, order = c(3,1,5), method = "ML")
#View(aic3)
sort(aic3)[1:10]
arima(x = lPrice, order = c(4,1,2), method = "ML")
model3
model33
acf(dlPrice)
pacf(dlPrice)
model33
model33$aic
model33$aic
model20$aic
model02$aic
model33
chosenModel <- arima(x = lPrice, order = c(3, 1, 3), method = "ML")
res <- residuals(chosenModel)
plot(res)
qqnorm(res)
shapiro.test(res)
ks.test(res)
ks.test(res)
normtest<-function(x)
{
library(nortest)
s<-shapiro.test(x)
ad<-ad.test(x)
cvm<-cvm.test(x)
ll<-lillie.test(x)
sf<-sf.test(x)
dfnorm<-data.frame(Method=c(s$method,ad$method,cvm$method,ll$method,sf$method),
P.value=c(s$p.value,ad$p.value,cvm$p.value,ll$p.value,sf$p.value))
return(dfnorm)
}
normtest(res)
normtest(res)
acf(res)
pacf(res)
tsdiag(chosenModel)
Box.test(res,lag=20)
Box.test(res,lag=20,type = "L")
acf(res^2)
pacf(res^2)
Box.test(res^2,lag=20)
Box.test(res^2,type="L",lag=20)
irfplot<-function (irf, s)
{
n <- length(irf)
plot(c(0,n+1), range(c(irf,1)), type = "n",xlab = "Time", ylab = "IRF", main = s)
lines(c(0,n+1),c(0,0))
lines(c(0,0),c(0,1))
for (i in 1:n)
lines(c(i,i), c(0, irf[i]))
}
psi<-ARMAtoMA(ar=c(0.2223,-1.0598,0.1263,0,0,0,0,-0.0856), ma=c(-0.1188,0.9877),lag.max=30)
psi
chosenModel
psi<-ARMAtoMA(lag.max=30)
psi
psi<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30)
psi
irfplot(psi,"Return IRF")
irfplot(psi,"Exchange Rate IRF")
irfplot(cumsum(psi)+1,"Log-Exchange Rate IRF")
psi<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=50)
psi
irfplot(psi,"Exchange Rate IRF")
irfplot(cumsum(psi)+1,"Log-Exchange Rate IRF")
psi100<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=100)
gamma0 <- (1+sum(psi100^2))*7.549e-05
gamma0
pc2<-ARMAacf(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30,pacf=T)^2
v<-gamma0
pc2<-ARMAacf(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30,pacf=T)^2
v<-gamma0
for(i in 2:31) v[i]<-v[i-1]*(1-pc2[i-1])
((1-v/gamma0)*100)[-1]
pc2*100
cumsum(pc2*100)
((gamma0-0.0001791)/gamma0)*100
((gamma0-7.549e-05)/gamma0)*100
pr<-predict(chosen_model,n.ahead=4)
pr<-predict(chosenModel,n.ahead=4)
pr
exp(pr$pred)
exp(pr$pred-2*pr$se)
exp(pr$pred+2*pr$se)
exp(pr$pred+2*pr$se)
ts.plot(lPrice)
ts.plot(dlPrice)
ts.plot(lPrice)
ts.plot(Price)
ts.plot(price)
plot(price)
plot(lPrice)
ts.plot(price)
ts.plot(price,pr$pred)
ts.plot(price)
ts.plot(price,pr$pred)
ts.plot(price)
ts.plot(price,pr$pred)
ts.plot(price,pr$pred,xlim = c(40,80))
ts.plot(price,pr$pred,ylim = c(40,80))
ts.plot(price,pr$pred,ylim = c(35,70))
ts.plot(price,pr$pred,ylim = c(35,70),color = c(0,1))
install.packages(ARIMA)
install.packages(ts)
install.packages(TS)
plot(pr)
ts.plot(pr)
ARMAtoMA(ar=.,ma=.,lag.max = 30)
arima(x = lPrice, order = c(3, 1, 3), method = "ML")
arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef
arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1]
arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[3]
arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3]
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])
len(as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3]))
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])[1]
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])[2]
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])[3]
arp <- as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])
arp[1]
mrp <- as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[4:6])
mrp
arp[1:3]
psi<-ARMAtoMA(ar=c(arp[1:3]), ma=c(mrp[1:3]),  lag.max=30)
psi
psi<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30)
psi
psi<-ARMAtoMA(ar=c(arp[1:3]), ma=c(mrp[1:3]),  lag.max=30)
psi
psi<-ARMAtoMA(ar=c(arp), ma=c(mrp),  lag.max=30)
psi
chosenModel$model
chosenModel$se
chosenModel
chosenModel$sigma2
timeSeriesProcess<- function(x,y,z){
chosenModel <- arima(lPrice, order = c(x,y,z),method = "L")
res<-residuals(chosen_model)
plot(res)
qqnorm(res)
acf(res)
pacf(res)
tsdiag(chosen_model)
normtest(res)
Box.test(res,lag=20)
Box.test(res,type="L",lag=20)
acf(res^2)
pacf(res^2)
Box.test(res^2,lag=20)
Box.test(res^2,type="L",lag=20)
arp <- as.numeric(arima(x = lPrice, order = c(x,y,z), method = "ML")$coef[1:x])
mrp <- as.numeric(arima(x = lPrice, order = c(x,y,z), method = "ML")$coef[x+1:x+z])
psi<-ARMAtoMA(ar=c(arp), ma=c(mrp),  lag.max=30)
irfplot(psi,"Return IRF")
irfplot(cumsum(psi)+1,"Log-Sensex IRF")
psi100<-ARMAtoMA(ar=c(arp), ma=c(mrp),  lag.max=100)
gamma0<-(1+sum(psi100^2))*chosenModel$sigma2
pc2<-ARMAacf(ar=c(arp), ma=c(mrp),lag.max=30,pacf=T)^2
v<-gamma0
for(i in 2:31) v[i]<-v[i-1]*(1-pc2[i-1])
((1-v/gamma0)*100)[-1]
pc2*100
cumsum(pc2*100)
pr<-predict(chosen_model,n.ahead=4)
exp(pr$pred-2*pr$se)
exp(pr$pred+2*pr$se)
}
timeSeriesProcess(2,1,0)
timeSeriesProcess(2,1,0)
timeSeriesProcess(0,1,2)
df <- read.csv("C:\\Users\\Lenovo\\Desktop\\ML\\Time Series\\exchange_rate.data")
df$Date <- as.Date(df$Date, format = "%B %d,%Y")
df <- df[order(df$Date),]
price <- as.ts(df$Price)
lPrice <- log(price)
plot(price)
plot(lPrice)
plot(sqrt(price))
acf(lPrice)
pacf(lPrice,ylim = c(-0.1,0.2))
library(tseries)
batteryTest <- function(x){
p.value.adf <- adf.test(x)$p.value
p.value.pp <- pp.test(x)$p.value
p.value.kpss <- kpss.test(x)$p.value
cat("The Results of the test for Unit Root")
cat("ADF Test ", "P.Value", " ",p.value.adf,"\n", sep="")
cat("PP Test ", "P.Value", " ",p.value.pp,"\n", sep="")
cat("KPSS Test ", "P.Value"," ", p.value.kpss,"\n", sep="")
}
batteryTest(lPrice)
dlPrice <- diff(lPrice)
batteryTest(dlPrice)
acf(dlPrice)
pacf(dlPrice)
Box.test(dlPrice,lag=30)
Box.test(dlPrice,lag=30,type="L")
arma_aics<-function(x,P,d,Q)
{
aics<-matrix(nrow=P+1,ncol=Q+1)
for(p in 0:P)
for(q in 0:Q)
{
mdl<-arima(x,order=c(p,d,q),method = "ML")
if( mdl$code==0 ) aics[p+1,q+1]<-mdl$aic
}
return(aics)
}
aic10 <- arma_aics(lPrice,10,1,10)
#View(aic3)
sort(aic3)[1:6]
model52 <- arima(lPrice,order=c(5,1,2),method = "ML")
model25<- arima(lPrice,order=c(2,1,5),method = "ML")
model33 <- arima(lPrice,order=c(3,1,3),method = "ML")
model02 <- arima(lPrice,order=c(0,1,2),method = "ML")
model35 <- arima(lPrice,order=c(3,1,5),method = "ML")
model53 <- arima(lPrice,order=c(5,1,3),method = "ML")
model20 <- arima(lPrice,order=c(2,1,0),method = "ML")
model34 <- arima(lPrice,order=c(3,1,4),method = "ML")
model03 <- arima(lPrice,order=c(0,1,3),method = "ML")
model12 <- arima(lPrice,order=c(1,1,2),method = "ML")
model52
arima(lPrice,order=c(5,1,2),method = "ML",fixed=c(0,NA,0,NA,0,NA,NA))
model33
model33
model33$aic
model20$aic
model02$aic
chosenModel <- arima(x = lPrice, order = c(3, 1, 3), method = "ML")
res <- residuals(chosenModel)
plot(res)
qqnorm(res)
normtest(res)
acf(res)
pacf(res)
tsdiag(chosenModel)
Box.test(res,lag=20)
Box.test(res,lag=20,type = "L")
acf(res^2)
pacf(res^2)
Box.test(res^2,lag=20)
Box.test(res^2,type="L",lag=20)
irfplot<-function (irf, s)
{
n <- length(irf)
plot(c(0,n+1), range(c(irf,1)), type = "n",xlab = "Time", ylab = "IRF", main = s)
lines(c(0,n+1),c(0,0))
lines(c(0,0),c(0,1))
for (i in 1:n)
lines(c(i,i), c(0, irf[i]))
}
chosenModel
psi<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30)
psi
irfplot(psi,"Exchange Rate IRF")
irfplot(cumsum(psi)+1,"Log-Exchange Rate IRF")
psi100<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=100)
gamma0 <- (1+sum(psi100^2))*7.549e-05
gamma0
pc2<-ARMAacf(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30,pacf=T)^2
v<-gamma0
for(i in 2:31) v[i]<-v[i-1]*(1-pc2[i-1])
((1-v/gamma0)*100)[-1]
pc2*100
cumsum(pc2*100)
((gamma0-7.549e-05)/gamma0)*100
pr<-predict(chosenModel,n.ahead=4)
pr
exp(pr$pred)
exp(pr$pred-2*pr$se)
install.packages("installr")
library(installr    )
updateR()
version
library(nortest)
install.packages("nortest")
library(nortest)
library("devtools")
install_github("karthickrajas/Lumos")
remove.packages("Lumos")
install_github("karthickrajas/Lumos")
?normtest
??normtest
data(package ="Lumos")
library(Lumos)
?normtest
clock_prices
data(packages="Lumos")
data(clock_prices)
library(Lumo)
Lumos
library(Lumos)
help(package="Lumos")
data(clock_prices)
help(package="Lumos")
data(clock_prices)
library(devtools)
install_github("Lumos")
install_github("karthickrajas/Lumos")
library("Lumos")
?normtest
help("Lumos")
help(package="Lumos")
clock_prices
remove
remove.packages("Lumos")
install_github("karthickrajas/Lumos")
?normtest
?normtest
library(Lumos)
normtest()
q
normtest
?normtest
?clock_prices
clock_prices
help(packages="Lumos")
help(package="Lumos")
auto
getwd()
View(lst)
load("C:/Users/Lenovo/Desktop/ML/Marketing Analytics/Data/newsData.RData")
View(newsData)
View(newsData)
setwd("C:/Users/Lenovo/Desktop/ML/Marketing Analytics/Data")
load(newsData.RData)
load("newsData.RData")
# Correlation structure:
newsData %>% cor() %>% corrplot()
library(tidyr)
# Correlation structure:
newsData %>% cor() %>% corrplot()
# Correlation structure:
newsData %>% cor() %>% corrplot()
newsData %>% cor() %>% corrplot()
# Variances of all variables before any data preparation
lapply(newsData, var)
# Variances of all variables before any data preparation
lapply(newsData, var)
newsData <- newsData %>% scale() %>% as.data.frame()
pcaCust <- prcomp(newsData)
str(pcaCust, give.attr = FALSE)
newsData <- newsData %>% scale() %>% as.data.frame()
# Compute PCA
pcaNews <- newsData %>% prcomp()
# Eigenvalues
pcaNews$sdev**2
newsData$url=NULL
str(newsData, give.attr = FALSE)
# Correlation structure:
newsData %>% cor() %>% corrplot()
newsData %>% cor() %>% corrplot()
?corrplot()
??corrplot
library(corrplot)
install.packages("corrplot")
library(corrplot)
# Correlation structure:
newsData %>% cor() %>% corrplot()
# Variances of all variables before any data preparation
# Standardize data
newsData <- newsData %>% scale() %>% as.data.frame()
# Compute PCA
pcaNews <- newsData %>% prcomp()
# Eigenvalues
pcaNews$sdev**2
"""
Principal components are extracted such that they cover as much of the original variance
as possible. If some variables had larger variance than others, they would be overrepresented
in the components.
"""
# Eigenvalues
pcaNews$sdev**2
summary(pcaNews)
pcaNews$sdev**2
screeplot(pcaNews, type = "lines")
box()
abline(h = 1, lty = 2)
screeplot(pcaNews, type = "lines")
box()
biplot(pcaNews, choices = 1:2, cex = 0.7)
pcaNews %>% biplot(cex = 0.5)
# Predict log shares with all original variables
mod1 <- lm(logShares ~ ., data = newsData)
# Create dataframe with log shares and first 6 components
dataNewsComponents <- cbind(logShares = newsData[, "logShares"],
pcaNews$x[, 1:6]) %>%
as.data.frame()
# Predict log shares with first six components
mod2 <- lm(logShares ~ ., data = dataNewsComponents)
# Print adjusted R squared for both models
summary(mod1)$adj.r.squared
summary(mod2)$adj.r.squared
# Predict log shares with all original variables
mod1 <- lm(logShares ~ ., data = newsData)
# Create dataframe with log shares and first 6 components
dataNewsComponents <- cbind(logShares = newsData[, "logShares"],
pcaNews$x[, 1:6]) %>%
as.data.frame()
# Predict log shares with all original variables
mod1 <- lm(logShares ~ ., data = newsData)
newsData$logShares <- log(newsData$shares)
# Predict log shares with all original variables
newsData$logShares <- log(1+newsData$shares)
mod1 <- lm(logShares ~ ., data = newsData)
# Create dataframe with log shares and first 6 components
dataNewsComponents <- cbind(logShares = newsData[, "logShares"],
pcaNews$x[, 1:6]) %>%
as.data.frame()
# Predict log shares with first six components
mod2 <- lm(logShares ~ ., data = dataNewsComponents)
# Print adjusted R squared for both models
summary(mod1)$adj.r.squared
summary(mod2)$adj.r.squared
# Predict log shares with all original variables
newsData$logShares <- log(newsData$shares)
mod1 <- lm(logShares ~ ., data = newsData)
# Create dataframe with log shares and first 6 components
dataNewsComponents <- cbind(logShares = newsData[, "logShares"],
pcaNews$x[, 1:6]) %>%
as.data.frame()
# Predict log shares with first six components
mod2 <- lm(logShares ~ ., data = dataNewsComponents)
# Print adjusted R squared for both models
summary(mod1)$adj.r.squared
summary(mod2)$adj.r.squared
