dlPrice <- diff(lPrice)
batteryTest(dlPrice)
acf(dlPrice)
pacf(dlPrice)
Box.test(dlPrice,lag=30)
Box.test(dlPrice,lag=30,type="L")
arma_aics<-function(x,P,d,Q)
{
aics<-matrix(nrow=P+1,ncol=Q+1)
for(p in 0:P)
for(q in 0:Q)
{
mdl<-arima(x,order=c(p,d,q),method = "ML")
if( mdl$code==0 ) aics[p+1,q+1]<-mdl$aic
}
return(aics)
}
aic10 <- arma_aics(lPrice,10,1,10)
View(aic3)
sort(aic3)[1:10]
View(aic3)
sort(aic3)[1:10]
model52 <- arima(lsen,order=c(5,1,2),method = "ML")
model52 <- arima(lPrice,order=c(5,1,2),method = "ML")
model25<- arima(lPrice,order=c(2,1,5),method = "ML")
model33 <- arima(lPrice,order=c(3,1,3),method = "ML")
model02 <- arima(lPrice,order=c(0,1,2),method = "ML")
model35 <- arima(lPrice,order=c(3,1,5),method = "ML")
model53 <- arima(lPrice,order=c(5,1,3),method = "ML")
model20 <- arima(lPrice,order=c(2,1,0),method = "ML")
model34 <- arima(lPrice,order=c(3,1,4),method = "ML")
model03 <- arima(lPrice,order=c(0,1,3),method = "ML")
model12 <- arima(lPrice,order=c(1,1,2),method = "ML")
model52
model52$coef[1]
model52
arima(lPrice,order=c(5,1,2),method = "ML",fixed=c(0,NA,0,NA,0,NA,NA))
model53
model25
model34
model53
model35
model02
model20
mode30
model30
model03
model22
arima(x = lPrice, order = c(2, 1, 2), method = "ML")
arima(x = lPrice, order = c(2, 1, 3), method = "ML")
arima(x = lPrice, order = c(3, 1, 2), method = "ML")
arima(x = lPrice, order = c(1,1,2), method = "ML")
arima(x = lPrice, order = c(1,1,3), method = "ML")
arima(x = lPrice, order = c(3,1,1), method = "ML")
arima(x = lPrice, order = c(0,1,3), method = "ML")
arima(x = lPrice, order = c(0,1,2), method = "ML")
arima(x = lPrice, order = c(2,1,0), method = "ML")
arima(x = lPrice, order = c(5,1,3), method = "ML")
arima(x = lPrice, order = c(3,1,5), method = "ML")
#View(aic3)
sort(aic3)[1:10]
arima(x = lPrice, order = c(4,1,2), method = "ML")
model3
model33
acf(dlPrice)
pacf(dlPrice)
model33
model33$aic
model33$aic
model20$aic
model02$aic
model33
chosenModel <- arima(x = lPrice, order = c(3, 1, 3), method = "ML")
res <- residuals(chosenModel)
plot(res)
qqnorm(res)
shapiro.test(res)
ks.test(res)
ks.test(res)
normtest<-function(x)
{
library(nortest)
s<-shapiro.test(x)
ad<-ad.test(x)
cvm<-cvm.test(x)
ll<-lillie.test(x)
sf<-sf.test(x)
dfnorm<-data.frame(Method=c(s$method,ad$method,cvm$method,ll$method,sf$method),
P.value=c(s$p.value,ad$p.value,cvm$p.value,ll$p.value,sf$p.value))
return(dfnorm)
}
normtest(res)
normtest(res)
acf(res)
pacf(res)
tsdiag(chosenModel)
Box.test(res,lag=20)
Box.test(res,lag=20,type = "L")
acf(res^2)
pacf(res^2)
Box.test(res^2,lag=20)
Box.test(res^2,type="L",lag=20)
irfplot<-function (irf, s)
{
n <- length(irf)
plot(c(0,n+1), range(c(irf,1)), type = "n",xlab = "Time", ylab = "IRF", main = s)
lines(c(0,n+1),c(0,0))
lines(c(0,0),c(0,1))
for (i in 1:n)
lines(c(i,i), c(0, irf[i]))
}
psi<-ARMAtoMA(ar=c(0.2223,-1.0598,0.1263,0,0,0,0,-0.0856), ma=c(-0.1188,0.9877),lag.max=30)
psi
chosenModel
psi<-ARMAtoMA(lag.max=30)
psi
psi<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30)
psi
irfplot(psi,"Return IRF")
irfplot(psi,"Exchange Rate IRF")
irfplot(cumsum(psi)+1,"Log-Exchange Rate IRF")
psi<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=50)
psi
irfplot(psi,"Exchange Rate IRF")
irfplot(cumsum(psi)+1,"Log-Exchange Rate IRF")
psi100<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=100)
gamma0 <- (1+sum(psi100^2))*7.549e-05
gamma0
pc2<-ARMAacf(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30,pacf=T)^2
v<-gamma0
pc2<-ARMAacf(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30,pacf=T)^2
v<-gamma0
for(i in 2:31) v[i]<-v[i-1]*(1-pc2[i-1])
((1-v/gamma0)*100)[-1]
pc2*100
cumsum(pc2*100)
((gamma0-0.0001791)/gamma0)*100
((gamma0-7.549e-05)/gamma0)*100
pr<-predict(chosen_model,n.ahead=4)
pr<-predict(chosenModel,n.ahead=4)
pr
exp(pr$pred)
exp(pr$pred-2*pr$se)
exp(pr$pred+2*pr$se)
exp(pr$pred+2*pr$se)
ts.plot(lPrice)
ts.plot(dlPrice)
ts.plot(lPrice)
ts.plot(Price)
ts.plot(price)
plot(price)
plot(lPrice)
ts.plot(price)
ts.plot(price,pr$pred)
ts.plot(price)
ts.plot(price,pr$pred)
ts.plot(price)
ts.plot(price,pr$pred)
ts.plot(price,pr$pred,xlim = c(40,80))
ts.plot(price,pr$pred,ylim = c(40,80))
ts.plot(price,pr$pred,ylim = c(35,70))
ts.plot(price,pr$pred,ylim = c(35,70),color = c(0,1))
install.packages(ARIMA)
install.packages(ts)
install.packages(TS)
plot(pr)
ts.plot(pr)
ARMAtoMA(ar=.,ma=.,lag.max = 30)
arima(x = lPrice, order = c(3, 1, 3), method = "ML")
arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef
arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1]
arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[3]
arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3]
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])
len(as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3]))
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])[1]
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])[2]
as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])[3]
arp <- as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[1:3])
arp[1]
mrp <- as.numeric(arima(x = lPrice, order = c(3, 1, 3), method = "ML")$coef[4:6])
mrp
arp[1:3]
psi<-ARMAtoMA(ar=c(arp[1:3]), ma=c(mrp[1:3]),  lag.max=30)
psi
psi<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30)
psi
psi<-ARMAtoMA(ar=c(arp[1:3]), ma=c(mrp[1:3]),  lag.max=30)
psi
psi<-ARMAtoMA(ar=c(arp), ma=c(mrp),  lag.max=30)
psi
chosenModel$model
chosenModel$se
chosenModel
chosenModel$sigma2
timeSeriesProcess<- function(x,y,z){
chosenModel <- arima(lPrice, order = c(x,y,z),method = "L")
res<-residuals(chosen_model)
plot(res)
qqnorm(res)
acf(res)
pacf(res)
tsdiag(chosen_model)
normtest(res)
Box.test(res,lag=20)
Box.test(res,type="L",lag=20)
acf(res^2)
pacf(res^2)
Box.test(res^2,lag=20)
Box.test(res^2,type="L",lag=20)
arp <- as.numeric(arima(x = lPrice, order = c(x,y,z), method = "ML")$coef[1:x])
mrp <- as.numeric(arima(x = lPrice, order = c(x,y,z), method = "ML")$coef[x+1:x+z])
psi<-ARMAtoMA(ar=c(arp), ma=c(mrp),  lag.max=30)
irfplot(psi,"Return IRF")
irfplot(cumsum(psi)+1,"Log-Sensex IRF")
psi100<-ARMAtoMA(ar=c(arp), ma=c(mrp),  lag.max=100)
gamma0<-(1+sum(psi100^2))*chosenModel$sigma2
pc2<-ARMAacf(ar=c(arp), ma=c(mrp),lag.max=30,pacf=T)^2
v<-gamma0
for(i in 2:31) v[i]<-v[i-1]*(1-pc2[i-1])
((1-v/gamma0)*100)[-1]
pc2*100
cumsum(pc2*100)
pr<-predict(chosen_model,n.ahead=4)
exp(pr$pred-2*pr$se)
exp(pr$pred+2*pr$se)
}
timeSeriesProcess(2,1,0)
timeSeriesProcess(2,1,0)
timeSeriesProcess(0,1,2)
df <- read.csv("C:\\Users\\Lenovo\\Desktop\\ML\\Time Series\\exchange_rate.data")
df$Date <- as.Date(df$Date, format = "%B %d,%Y")
df <- df[order(df$Date),]
price <- as.ts(df$Price)
lPrice <- log(price)
plot(price)
plot(lPrice)
plot(sqrt(price))
acf(lPrice)
pacf(lPrice,ylim = c(-0.1,0.2))
library(tseries)
batteryTest <- function(x){
p.value.adf <- adf.test(x)$p.value
p.value.pp <- pp.test(x)$p.value
p.value.kpss <- kpss.test(x)$p.value
cat("The Results of the test for Unit Root")
cat("ADF Test ", "P.Value", " ",p.value.adf,"\n", sep="")
cat("PP Test ", "P.Value", " ",p.value.pp,"\n", sep="")
cat("KPSS Test ", "P.Value"," ", p.value.kpss,"\n", sep="")
}
batteryTest(lPrice)
dlPrice <- diff(lPrice)
batteryTest(dlPrice)
acf(dlPrice)
pacf(dlPrice)
Box.test(dlPrice,lag=30)
Box.test(dlPrice,lag=30,type="L")
arma_aics<-function(x,P,d,Q)
{
aics<-matrix(nrow=P+1,ncol=Q+1)
for(p in 0:P)
for(q in 0:Q)
{
mdl<-arima(x,order=c(p,d,q),method = "ML")
if( mdl$code==0 ) aics[p+1,q+1]<-mdl$aic
}
return(aics)
}
aic10 <- arma_aics(lPrice,10,1,10)
#View(aic3)
sort(aic3)[1:6]
model52 <- arima(lPrice,order=c(5,1,2),method = "ML")
model25<- arima(lPrice,order=c(2,1,5),method = "ML")
model33 <- arima(lPrice,order=c(3,1,3),method = "ML")
model02 <- arima(lPrice,order=c(0,1,2),method = "ML")
model35 <- arima(lPrice,order=c(3,1,5),method = "ML")
model53 <- arima(lPrice,order=c(5,1,3),method = "ML")
model20 <- arima(lPrice,order=c(2,1,0),method = "ML")
model34 <- arima(lPrice,order=c(3,1,4),method = "ML")
model03 <- arima(lPrice,order=c(0,1,3),method = "ML")
model12 <- arima(lPrice,order=c(1,1,2),method = "ML")
model52
arima(lPrice,order=c(5,1,2),method = "ML",fixed=c(0,NA,0,NA,0,NA,NA))
model33
model33
model33$aic
model20$aic
model02$aic
chosenModel <- arima(x = lPrice, order = c(3, 1, 3), method = "ML")
res <- residuals(chosenModel)
plot(res)
qqnorm(res)
normtest(res)
acf(res)
pacf(res)
tsdiag(chosenModel)
Box.test(res,lag=20)
Box.test(res,lag=20,type = "L")
acf(res^2)
pacf(res^2)
Box.test(res^2,lag=20)
Box.test(res^2,type="L",lag=20)
irfplot<-function (irf, s)
{
n <- length(irf)
plot(c(0,n+1), range(c(irf,1)), type = "n",xlab = "Time", ylab = "IRF", main = s)
lines(c(0,n+1),c(0,0))
lines(c(0,0),c(0,1))
for (i in 1:n)
lines(c(i,i), c(0, irf[i]))
}
chosenModel
psi<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30)
psi
irfplot(psi,"Exchange Rate IRF")
irfplot(cumsum(psi)+1,"Log-Exchange Rate IRF")
psi100<-ARMAtoMA(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=100)
gamma0 <- (1+sum(psi100^2))*7.549e-05
gamma0
pc2<-ARMAacf(ar=c(0.563,-0.8193,0.5861), ma=c(-0.4649,0.8527,-0.5535),lag.max=30,pacf=T)^2
v<-gamma0
for(i in 2:31) v[i]<-v[i-1]*(1-pc2[i-1])
((1-v/gamma0)*100)[-1]
pc2*100
cumsum(pc2*100)
((gamma0-7.549e-05)/gamma0)*100
pr<-predict(chosenModel,n.ahead=4)
pr
exp(pr$pred)
exp(pr$pred-2*pr$se)
install.packages("installr")
library(installr    )
updateR()
version
library(nortest)
install.packages("nortest")
library(nortest)
library("devtools")
install_github("karthickrajas/Lumos")
remove.packages("Lumos")
install_github("karthickrajas/Lumos")
?normtest
??normtest
data(package ="Lumos")
library(Lumos)
?normtest
clock_prices
data(packages="Lumos")
data(clock_prices)
library(Lumo)
Lumos
library(Lumos)
help(package="Lumos")
data(clock_prices)
help(package="Lumos")
data(clock_prices)
library(devtools)
install_github("Lumos")
install_github("karthickrajas/Lumos")
library("Lumos")
?normtest
help("Lumos")
help(package="Lumos")
clock_prices
remove
remove.packages("Lumos")
install_github("karthickrajas/Lumos")
?normtest
?normtest
library(Lumos)
normtest()
q
normtest
?normtest
?clock_prices
clock_prices
help(packages="Lumos")
help(package="Lumos")
auto
getwd()
View(df)
View(aic10)
clear()
clear
dataSurv <- read.csv("survivalDataExercise")
dataSurv <- read.csv("data\\survivalDataExercise")
setwd("C:/Users/Lenovo/Desktop/ML/Marketing Analytics/Data")
dataSurv <- read.csv("survivalDataExercise")
setwd("C:/Users/Lenovo/Desktop/ML/Marketing Analytics/Data")
dataSurv <- read.csv("survivalDataExercise.csv")
View(dataSurv)
View(dataSurv)
str(dataSurv)
plotTenure <- dataSurv %>%
mutate(churn = churn %>% factor(labels = c("No", "Yes"))) %>%
ggplot() +
geom_histogram(aes(x = tenure,
fill = factor(churn))) +
facet_grid( ~ churn) +
theme(legend.position = "none")
plotTenure
library(ggplot2)
plotTenure <- dataSurv %>%
mutate(churn = churn %>% factor(labels = c("No", "Yes"))) %>%
ggplot() +
geom_histogram(aes(x = tenure,
fill = factor(churn))) +
facet_grid( ~ churn) +
theme(legend.position = "none")
plotTenure <- dataSurv %>%
mutate(churn = boughtAgain %>% factor(labels = c("No", "Yes"))) %>%
ggplot() +
geom_histogram(aes(x = tenure,
fill = factor(churn))) +
facet_grid( ~ churn) +
theme(legend.position = "none")
plotTenure <- dataSurv %>%
mutate(churn = boughtAgain %>% factor(labels = c("No", "Yes"))) %>%
ggplot() +
geom_histogram(aes(x = tenure,
fill = factor(churn))) +
facet_grid( ~ churn) +
theme(legend.position = "none")
plotTenure <- dataSurv %>%
mutate(churn = boughtAgain %>% factor(labels = c("No", "Yes")))
ggplot() +
geom_histogram(aes(x = daysSinceFirstPurchase,
fill = factor(churn))) +
facet_grid( ~ churn) +
theme(legend.position = "none")
plotTenure <- dataSurv %>%
mutate(churn = churn %>% factor(labels = c("No", "Yes"))) %>%
ggplot() +
geom_histogram(aes(x = daysSinceFirstPurchase,
fill = factor(churn))) +
facet_grid( ~ churn) +
theme(legend.position = "none")
plotTenure
plotTenure <- dataSurv %>%
mutate(churn = churn %>% factor(labels = c("No", "Yes"))) %>%
ggplot() +
geom_histogram(aes(x = daysSinceFirstPurchase,
fill = factor(churn))) +
facet_grid( ~ churn) +
theme(legend.position = "none")
ggplot(dataNextOrder) +
geom_histogram(aes(x = daysSinceFirstPurch,
fill = factor(boughtAgain))) +
facet_grid( ~ boughtAgain) + # Separate plots for boughtAgain = 1 vs. 0
theme(legend.position = "none") # Don't show legend
ggplot(data = dataSurv) +
geom_histogram(aes(x = daysSinceFirstPurch,
fill = factor(boughtAgain))) +
facet_grid( ~ boughtAgain) + # Separate plots for boughtAgain = 1 vs. 0
theme(legend.position = "none") # Don't show legend
cbind(dataSurv %>% select(tenure, churn),
surv = Surv(dataSurv$tenure, dataSurv$churn)) %>% head(10)
# Create survival object
survObj <- Surv(dataSurv$daysSinceFirstPurch, dataSurv$boughtAgain)
library(survival)
survObj <- Surv(dataSurv$daysSinceFirstPurch, dataSurv$boughtAgain)
str(survObj)
fitKMSimple <- survfit(survObj ~ 1)
print(fitKMSimple)
plot(fitKMSimple,
conf.int = FALSE, xlab = "Time since first purchase", ylab = "Survival function", main = "Survival function")
fitKMCov <- survfit(survObj ~ voucher, data = dataSurv)
plot(fitKMCov, lty = 2:3,
xlab = "Time since first purchase", ylab = "Survival function", main = "Survival function")
legend(90, .9, c("No", "Yes"), lty = 2:3)
library(rms)
install.packages(rms)
install.packages("rms")
options(datadist = "dataSurv")
dd <- datadist(dataSurv)
options(datadist = "dd")
library(rms)
dd <- datadist(dataSurv)
options(datadist = "dd")
View(dd)
View(dd)
fitCPH <- cph(Surv(daysSinceFirstPurch, boughtAgain) ~ shoppingCartValue + voucher + returned + gender,
data = dataSurv,
x = TRUE, y = TRUE, surv = TRUE)
print(fitCPH)
# Interpret coefficients
exp(fitCPH$coefficients)
plot(summary(fitCPH), log = TRUE)
survplot(fitCPH, shoppingCartValue, label.curves = list(keys = 1:5))
survplot(fitCPH, voucher, label.curves = list(keys = 1:5))
survplot(fitCPH, voucher, label.curves = list(keys = 1:2))
survplot(fitCPH, gender, label.curves = list(keys = 1:2))
testCPH <- cox.zph(fitCPH)
print(testCPH)
plot(testCPH1, var = "gender=male")
testCPH <- cox.zph(fitCPH)
print(testCPH)
plot(testCPH, var = "gender=male")
validate(fitCPH, method = "crossvalidation",
B = 10, dxy = TRUE, pr = FALSE)
newCustomer <- data.frame(daysSinceFirstPurch = 21, shoppingCartValue = 99.90, gender = "female", voucher = 1, returned = 0, stringsAsFactors = FALSE)
# Make predictions
pred <- survfit(fitCPH, newdata = newCustomer)
print(pred)
plot(pred)
newCustomer2 <- newCustomer
newCustomer2$gender <- "male"
pred2 <- survfit(fitCPH, newdata = newCustomer2)
print(pred2)
str(survest(fitCPH, newdata = newCustomer, times = 28))
str(survest(fitCPH, newdata = newCustomer, times = 56))
